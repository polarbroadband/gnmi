syntax = "proto3";

option go_package = "github.com/polarbroadband/gnmi/pkg/gnmiprobe";

package gnmiprobe;

//import "google/protobuf/struct.proto";
//import "google/protobuf/timestamp.proto";
//import "runner.proto";

import "github.com/openconfig/gnmi/proto/gnmi/gnmi.proto";

// stateless gnmi probe service
service Probe {
  // healthckeck
  rpc Healtz (HealtzReq) returns (SvrStat) {}
  // gNMI Probe bidirectional streaming
  rpc ConnectProbe (stream ProbeRequest) returns (stream ProbeResponse) {}

  // gNMI Probe connection multiplexing
  rpc Connect(ProbeConn) returns (ProbeBase) {}
  rpc Disconnect(ProbeBase) returns (OprStat) {}
  rpc Capability(ProbeBase) returns (gnmi.CapabilityResponse) {}
  rpc Get(GetRequest) returns (gnmi.GetResponse) {}
  rpc Set(SetRequest) returns (gnmi.SetResponse) {}
  rpc Subscribe(SubscribeRequest) returns (stream gnmi.SubscribeResponse) {}

}

message ProbeRequest {
  int64 Cid = 1;
  int64 Timeout = 2;  // second
  oneof request {
    ProbeConn conn = 5;
    gnmi.SetRequest set = 6;
    gnmi.GetRequest get = 7;
    gnmi.SubscribeRequest sub = 8;
  }
}

message ProbeConn {
  bool TLS = 1;
  string Cer = 2;   // ca cert file name
  string Host = 3;
  string Port = 4;
  string Usr = 5;
  string Pwd = 6;
}

message ProbeResponse {
  int64 Cid = 1;
  string Error = 2;
  repeated gnmi.Notification Resp = 3;
}


message SvrStat {
  string Host = 1;
  string Release = 2;
  int64 Load = 3;
}

message HealtzReq {
}

message ProbeBase {
  string ID = 1;
}

message OprStat {
  string Status = 1;
}

message GetRequest {
  string ID = 1;
  gnmi.GetRequest Request = 2;
}

message SetRequest {
  string ID = 1;
  gnmi.SetRequest Request = 2;
}

message SubscribeRequest {
  string ID = 1;
  gnmi.SubscribeRequest Request = 2;
}
